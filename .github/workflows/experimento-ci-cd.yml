# Nome do workflow
name: experimento-ci-cd

# Evento que aciona o workflow: toda vez que for criado um Pull Request para a branch main
on:
  push:
    branches:
      - main

# Definição dos jobs (tarefas) que serão executadas
jobs:

  # Primeiro job: Executar testes unitários
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instalar dependências do backend
        run: |
          cd backend
          npm install

      - name: Executar testes unitários com Jest
        run: |
          cd backend
          npm test -- --coverage

  # Segundo job: Build (construção) das imagens Docker
  build:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configurar Docker QEMU
        uses: docker/setup-qemu-action@v2

      - name: Build das imagens Docker
        run: docker compose build

  # Terceiro job: Subir os containers temporariamente para testes básicos de integração
  up-containers:
    needs: build
    runs-on: ubuntu-latest
    env:
      POSTGRES_DB: adote_facil
      POSTGRES_HOST: adote-facil-postgres
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_PORT: 5432
      POSTGRES_CONTAINER_PORT: 6500

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Criar arquivo .env
        working-directory: ./backend
        run: |
          echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" > .env
          echo "POSTGRES_HOST=${{ env.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_PORT=${{ env.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_CONTAINER_PORT=${{ env.POSTGRES_CONTAINER_PORT }}" >> .env

      - name: Subir containers com Docker Compose
        working-directory: ./backend
        run: |
          docker compose up -d
          sleep 10
          docker compose down

  # Quarto job: Executar testes end-to-end com Cypress
  e2e-tests:
    needs: build  # Depende do build estar completo
    runs-on: ubuntu-latest
    
    # Serviços necessários (banco de dados)
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: adote_facil
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Instalar dependências do frontend
        working-directory: ./frontend
        run: npm ci

      - name: Instalar Cypress
        working-directory: ./frontend
        run: npm install cypress --save-dev

      - name: Executar testes Cypress
        working-directory: ./frontend
        run: npx cypress run --spec "cypress/e2e/**/*.cy.js"
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          NODE_ENV: test

      - name: Upload vídeos dos testes (se falharem)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: frontend/cypress/videos

      - name: Upload screenshots (se falharem)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots

  # Quinto job: Geração e entrega do artefato do projeto
  delivery:
    needs: [build, e2e-tests]  # Agora depende também dos testes E2E
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Gerar arquivo ZIP do projeto completo
        run: zip -r adote-facil-projeto.zip . -x '*.git*' '*.github*' 'node_modules/*'

      - name: Upload do artefato
        uses: actions/upload-artifact@v4
        with:
          name: adote-facil-projeto
          path: adote-facil-projeto.zip