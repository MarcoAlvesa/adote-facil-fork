# Nome do workflow
name: experimento-ci-cd

# Evento que aciona o workflow
on:
  push:
    branches:
      - ci-cd
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Testes unitários (continua o mesmo)
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instalar dependências e rodar testes unitários do backend
        run: |
          cd backend
          npm install
          npm test -- --coverage

  # Job 2: Construir as imagens e rodar os testes E2E
# Job 2: Construir as imagens e rodar os testes E2E
  build-and-test:
    needs: unit-test
    runs-on: ubuntu-latest
    env:
      POSTGRES_DB: adote_facil
      POSTGRES_HOST: adote-facil-postgres
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_PORT: 5432
      POSTGRES_CONTAINER_PORT: 6500
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx e QEMU
        uses: docker/setup-buildx-action@v2
      - uses: docker/setup-qemu-action@v2

      - name: Build das imagens Docker
        run: docker compose build

      - name: Criar arquivo .env para o backend
        working-directory: ./backend
        run: |
          echo "POSTGRES_DB=${{ env.POSTGRES_DB }}" > .env
          echo "POSTGRES_HOST=${{ env.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_USER=${{ env.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_PORT=${{ env.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_CONTAINER_PORT=${{ env.POSTGRES_CONTAINER_PORT }}" >> .env

      - name: Subir containers com Docker Compose
        run: docker compose build

      - name: Exibir logs dos containers
        run: docker compose logs

      - name: Executar testes E2E com Cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./frontend
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 180
          browser: chrome

      - name: Derrubar containers após os testes
        if: always()
        run: docker compose down

  # Job 3: Geração do artefato
  delivery:
    # Ajustamos a dependência aqui. Queremos o artefato apenas se os testes E2E passarem.
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Gerar arquivo ZIP do projeto completo
        run: zip -r adote-facil-projeto.zip . -x '*.git*' '*.github*' 'node_modules/*'

      - name: Upload do artefato
        uses: actions/upload-artifact@v4
        with:
          name: adote-facil-projeto
          path: adote-facil-projeto.zip