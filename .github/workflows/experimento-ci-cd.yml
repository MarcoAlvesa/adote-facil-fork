# Nome do workflow
name: experimento-ci-cd

# Evento que aciona o workflow
on:
  push:
    branches:
      - ci-cd
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Testes unitários (continua o mesmo)
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instalar dependências e rodar testes unitários do backend
        run: |
          cd backend
          npm install
          npm test -- --coverage

# Job 2: Instalar dependências e rodar testes E2E (sem Docker Build)
  install-and-test:
    needs: unit-test
    runs-on: ubuntu-latest

  # "Services" cria containers auxiliares. Usaremos um para o PostgreSQL.
    services:
     postgres:
        image: postgres:13 # Define a imagem do banco de dados
        env: # Variáveis de ambiente para o container do banco
          POSTGRES_DB: adote_facil
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432 # Mapeia a porta do container para a máquina (runner)
        # Opção para garantir que o banco esteja pronto antes de continuar
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Use a versão do Node.js do seu projeto

    # --- Configuração do Backend ---
      - name: Instalar dependências do Backend
        run: npm install
        working-directory: ./backend

      - name: Criar arquivo .env para o Backend
        working-directory: ./backend
        run: |
          echo "POSTGRES_DB=adote_facil" > .env
          echo "POSTGRES_HOST=localhost" >> .env # O host agora é localhost
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          # Adicione aqui outras variáveis que seu backend precise

    # Se você tiver migrações de banco, precisará rodá-las
    # - name: Rodar migrações do banco de dados
    #   run: npm run migrate # O comando pode variar
    #   working-directory: ./backend

      - name: Iniciar servidor do Backend em background
        run: npm start & # O '&' no final é crucial para rodar em background
        working-directory: ./backend

      # --- Configuração do Frontend ---
      - name: Instalar dependências do Frontend
        run: npm install
        working-directory: ./frontend

      - name: Iniciar servidor do Frontend em background
        run: npm start &
        working-directory: ./frontend

      # --- Execução dos Testes ---
      - name: Executar testes E2E com Cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./frontend
        # Não precisamos mais do 'start', pois já iniciamos os servidores
        # A action apenas vai esperar e rodar os testes
          wait-on: 'http://localhost:3000' 
          wait-on-timeout: 180

  # Job 3: Geração do artefato
  delivery:
    # Ajustamos a dependência aqui. Queremos o artefato apenas se os testes E2E passarem.
    needs: install-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Gerar arquivo ZIP do projeto completo
        run: zip -r adote-facil-projeto.zip . -x '*.git*' '*.github*' 'node_modules/*'

      - name: Upload do artefato
        uses: actions/upload-artifact@v4
        with:
          name: adote-facil-projeto
          path: adote-facil-projeto.zip