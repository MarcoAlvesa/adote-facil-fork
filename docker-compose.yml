# Adiciona a versão para garantir compatibilidade e clareza
version: '3.8'

services:
  adote-facil-postgres:
    image: postgres:14-alpine
    container_name: 'adote-facil-postgres'
    restart: unless-stopped
    env_file:
      - .env # Usando o .env centralizado na raiz
    environment:
      # As variáveis são lidas do .env e passadas para o contêiner
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # A seção 'ports' foi removida por segurança
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - adote-facil-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 3s
      timeout: 3s
      retries: 5

  adote-facil-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: 'adote-facil-backend'
    restart: unless-stopped
    ports:
      - "8080:8080"
    env_file:
      - .env # O backend também usa o .env central
    environment:
      - NODE_ENV=production
    depends_on:
      adote-facil-postgres:
        condition: service_healthy # Esta é a única condição necessária
    # O 'command' foi removido. Coloque `CMD ["npm", "start"]` no seu Dockerfile.
    networks:
      - adote-facil-network

  adote-facil-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: 'adote-facil-frontend'
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - adote-facil-backend
    networks:
      - adote-facil-network

volumes:
  db_data:

networks:
  adote-facil-network:
    driver: bridge